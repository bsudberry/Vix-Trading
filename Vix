import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.neural_network import MLPRegressor
from sklearn.tree import DecisionTreeRegressor


# Load the data from the CSV file
df = pd.read_csv('vix_data.csv')

# Create a feature matrix X and a target vector y
X = df[['Open', 'High', 'Low']]
y = df['Close']

# Split the data into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a LinearRegression object
reg = LinearRegression()

# Create a Multi-layer Perceptron Regressor object
mlp = MLPRegressor()

# Create a Decision Tree Regressor object
dtr = DecisionTreeRegressor()

# fit the model on the training data
reg.fit(X_train, y_train)
mlp.fit(X_train, y_train)
dtr.fit(X_train, y_train)

# Use the model to make predictions on the test data
y_pred = reg.predict(X_test)
y_pred_mlp = mlp.predict(X_test)
y_pred_dtr = dtr.predict(X_test)

# Create a DataFrame with the predictions and the actual values
predictions = pd.DataFrame({'predicted': y_pred, 'actual': y_test})
predictions_mlp = pd.DataFrame({'predicted': y_pred_mlp, 'actual': y_test})
predictions_dtr = pd.DataFrame({'predicted': y_pred_dtr, 'actual' : y_test})

# Combine the dataframes
combined_df = pd.concat([predictions, predictions_mlp, predictions_dtr])

# Save the combined dataframe to a CSV file
combined_df.to_csv('vix_predictions_combined.csv', index=False)
