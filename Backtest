from backtesting import Backtest
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.neural_network import MLPRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from backtesting import Backtest, Strategy

# Load the data from the CSV file
df = pd.read_csv('vix_data.csv')

# Create a feature matrix X and a target vector y
X = df[['Open', 'High', 'Low']]
y = df['Close']

# Split the data into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the model
reg = LinearRegression()
mlp = MLPRegressor()
dtr = DecisionTreeRegressor()

# Fit the model on the training data
reg.fit(X_train, y_train)
mlp.fit(X_train, y_train)
dtr.fit(X_train, y_train)

class MyStrategy(Strategy):
    def init(self):
        # Initialize the capital
        self.reg = reg
        self.mlp = mlp
        self.dtr = dtr
        self.capital = 10000
        self.position = 0
        
    def next(self):
        # Use the model to make predictions on the test data
        y_pred = self.reg.predict(X_test)
        
        # Create a new column to store the trading signals
        signal = np.where(y_pred > y_test, 1, -1)

        # Create a new column to store the daily returns
        returns = signal * (y_test - y_pred)
        
        # Update the position and capital
        self.position += signal
        self.capital += returns
        
bt = Backtest(df, MyStrategy, cash=10000, commission=.01)
bt.run()
bt.plot()
